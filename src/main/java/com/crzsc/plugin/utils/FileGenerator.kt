package com.crzsc.plugin.utils

import com.crzsc.plugin.utils.PluginUtils.showNotify
import com.crzsc.plugin.utils.PluginUtils.toLowCamelCase
import com.crzsc.plugin.utils.PluginUtils.toUpperCaseFirst
import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.project.Project
import com.intellij.openapi.project.guessProjectDir
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiDocumentManager
import com.intellij.psi.PsiManager
import com.intellij.psi.util.PsiTreeUtil
import org.jetbrains.kotlin.idea.core.util.toPsiFile
import org.jetbrains.yaml.YAMLElementGenerator
import org.jetbrains.yaml.psi.YAMLFile
import org.jetbrains.yaml.psi.YAMLMapping
import org.jetbrains.yaml.psi.YAMLSequence

class FileGenerator(private val project: Project) {
    private val ignoreDir = listOf("2.0x", "3.0x", "Mx", "Nx")
    fun generate() {
        WriteCommandAction.runWriteCommandAction(project) {
            val map = mutableMapOf<String, String>()
            val file = FileHelper.getAssetsFolder(project)
            if (file == null) {
                showNotify("Please configure your assets path in pubspec.yaml")
                return@runWriteCommandAction
            }
            generateFileMap(file, map)
            if (map.isEmpty()) {
                showNotify("assets path is empty")
                return@runWriteCommandAction
            }
            val content = StringBuilder()
            content.append("///This file is automatically generated. DO NOT EDIT, all your changes would be lost.\n")
            val className = FileHelper.getGeneratedClassName(project)
            content.append("class $className {\n  $className._();\n\n")
            map.toSortedMap().forEach {
                content.append("  static const String ${it.key} = '${it.value}';\n")
            }
            content.append("\n}\n")
            val psiManager = PsiManager.getInstance(project)
            val psiDocumentManager = PsiDocumentManager.getInstance(project)
            FileHelper.getGeneratedFile(project).let { generated ->
                psiManager.findFile(generated)?.let { dartFile ->
                    psiDocumentManager.getDocument(dartFile)?.let { document ->
                        if (document.text != content.toString()) {
                            document.setText(content)
                            psiDocumentManager.commitDocument(document)
                            showNotify("assets generate succeed")
                        } else {
                            showNotify("nothing changed")
                        }
                    }
                }
            }
        }
    }

    private fun generateFileMap(root: VirtualFile, map: MutableMap<String, String>) {
        val namedWithParent = FileHelper.isNamedWithParent(project)
        val pattern = FileHelper.getFilenameSplitPattern(project)
        val regex = Regex(pattern)
        root.children.filter {
            !it.name.startsWith('.') && checkName(it.name)
        }.forEach {
            if (it.isDirectory) {
                generateFileMap(it, map)
            } else {
                var key = it.nameWithoutExtension.toLowCamelCase(regex)///fileName style
                val value = it.path.removePrefix("${project.basePath}/")
                if (namedWithParent) {
                    it.parent?.let { parent ->
                        key = "${parent.name.toLowCamelCase(regex)}${key.toUpperCaseFirst()}"
                        if (map.containsKey(key)) {
                            key = "${parent.parent.name.toLowCamelCase(regex)}${key.toUpperCaseFirst()}"
                        }
                        map[key] = value
                    }
                } else {
                    map[key] = value
                }
            }
        }
    }

    fun buildYaml() {
        val guessProjectDir = project.guessProjectDir() ?: return
        val assetsFile = guessProjectDir.children.firstOrNull { it.name == "assets" } ?: return
        val fileAssetsDir =
            FileHelper.getAssetsFiles(assetsFile)?.map { "${it.path}/".replaceFirst("${guessProjectDir.path}/", "") }
                ?.toMutableList()?.takeIf { it.isNotEmpty() } ?: return
        //由于本地修改后有几秒缓存，所以每次数据都修改，不判断是否有变动
        /*al mergeDir=fileAssetsDir.toMutableList()
        FileHelper.getPubSpecConfig(project)?.let { pubSpecConfig ->
            (pubSpecConfig.map["flutter"] as? Map<*, *>)?.let { configureMap ->
                val assets = (configureMap["assets"] as? ArrayList<*>) ?: return
                assets.forEach { ass ->
                    mergeDir.remove(ass)
                }
            }
        }
        if(mergeDir.isEmpty()){
            println("-----没有需要添加的数据")
            return
        }*/
        fileAssetsDir.forEach {
            println("全部文件夹：$it")
        }
        val yaml = guessProjectDir.children.firstOrNull { it.name == "pubspec.yaml" } ?: return
        val yamlFile = (yaml.toPsiFile(project) as? YAMLFile) ?: return
        val psiElement =
            yamlFile.node.getChildren(null)
                .firstOrNull()?.psi?.children?.firstOrNull()?.children?.firstOrNull { it.text.startsWith("flutter:") }
                ?: return
        val yamlMapping = psiElement.children.first() as YAMLMapping
        val assetsValue = yamlMapping.keyValues.firstOrNull { it.keyText == "assets" } ?: return
        WriteCommandAction.runWriteCommandAction(project) {
            val stringBuilder = StringBuilder("assets:")
            fileAssetsDir.forEach {
                stringBuilder.append("\n    - $it")
            }
            val yamlValue = PsiTreeUtil.collectElementsOfType(
                YAMLElementGenerator.getInstance(project)
                    .createDummyYamlWithText(stringBuilder.toString()), YAMLSequence::class.java
            ).iterator().next()
            assetsValue.setValue(yamlValue)

        }


    }

    private fun checkName(name: String): Boolean {
        return !ignoreDir.contains(name)
    }

}