package com.crzsc.plugin.utils

import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiDocumentManager
import com.intellij.psi.PsiManager
import com.crzsc.plugin.setting.PluginSetting

class FileGenerator(private val project: Project) {
    fun generate() {
        WriteCommandAction.runWriteCommandAction(project) {
            val map = mutableMapOf<String, String>()
            generateFileMap(FileHelpers.getAssetsFolder(project), map)
            if (map.isEmpty()) {
                PluginUtils.showNotify("assets path is empty")
                return@runWriteCommandAction
            }
            val content = StringBuilder()
            content.append("///This file is automatically generated. DO NOT EDIT, all your changes would be lost.\n")
            var className = PluginSetting.getInstance().className
            if (className.isNullOrEmpty()) {
                className = "Assets"
            }
            content.append("class $className {\n  $className._();\n\n")
            map.toSortedMap().forEach {
                content.append("  static const String ${it.key} = '${it.value}';\n")
            }
            content.append("\n}\n")
            val psiManager = PsiManager.getInstance(project)
            val psiDocumentManager = PsiDocumentManager.getInstance(project)
            FileHelpers.getGeneratedFile(project).let { file ->
                psiManager.findFile(file)?.let { dartFile ->
                    psiDocumentManager.getDocument(dartFile)?.let { document ->
                        if (document.text != content.toString()) {
                            document.setText(content)
                            psiDocumentManager.commitDocument(document)
                            PluginUtils.showNotify("assets generate succeed")
                        } else {
                            PluginUtils.showNotify("nothing changed")
                        }
                    }
                }
            }
        }
    }

    private fun generateFileMap(root: VirtualFile, map: MutableMap<String, String>) {
        root.children.filter {
            !it.name.startsWith('.')
        }.forEach {
            if (it.isDirectory) {
                generateFileMap(it, map)
            } else {
                if (PluginSetting.getInstance().namedWithParent) {
                    it.parent?.let { parent ->
                        if (parent.name == PluginSetting.getInstance().assetsPath) {
                            map["${it.nameWithoutExtension}_${it.extension}"] = it.path.removePrefix("${project.basePath}/")
                        } else {
                            map["${parent.name}_${it.nameWithoutExtension}_${it.extension}"] = it.path.removePrefix("${project.basePath}/")
                        }
                    }
                } else {
                    map["${it.nameWithoutExtension}_${it.extension}"] = it.path.removePrefix("${project.basePath}/")
                }
            }
        }
    }
}